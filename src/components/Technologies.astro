---
import TailwindIcon from "./icons/Tailwind.astro";
import NextJSIcon from "./icons/NextJS.astro";
import HTMLIcon from "./icons/HTML.astro";
import CSSIcon from "./icons/CSS.astro";
import JavaScriptIcon from "./icons/JavaScript.astro";
import GitIcon from "./icons/Git.astro";
import PythonIcon from "./icons/Python.astro";
import MongoDBIcon from "./icons/MongoDB.astro";
import NodeJSIcon from "./icons/Node.astro";
import ReactIcon from "./icons/React.astro";
import PostgreSQLIcon from "./icons/PostgreSQL.astro";
import GoogleCloudIcon from "./icons/GoogleCloud.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils"

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang);

enum TechnologyType {
  Frontend = 1,
  Backend = 2,
  Database = 3,
  Other = 4,
}

const TECHNOLOGIES = [
  {
    name: 'JavaScript',
    icon: JavaScriptIcon,
    colorClasses: 'bg-gradient-to-r from-yellow-400 to-yellow-500 dark:from-yellow-300 dark:to-yellow-400',
    type: TechnologyType.Frontend
  },
  {
    name: 'HTML',
    icon: HTMLIcon,
    colorClasses: 'bg-gradient-to-r from-orange-500 to-orange-600 dark:from-orange-400 dark:to-orange-500',
    type: TechnologyType.Frontend
  },
  {
    name: 'CSS',
    icon: CSSIcon,
    colorClasses: 'bg-gradient-to-r from-blue-400 to-blue-500 dark:from-blue-300 dark:to-blue-400',
    type: TechnologyType.Frontend
  },
  {
    name: "Tailwind",
    icon: TailwindIcon,
    colorClasses: "bg-gradient-to-r from-cyan-500 to-blue-500 dark:from-cyan-400 dark:to-blue-400",
    type: TechnologyType.Frontend,
  },
  {
    name: "NextJS",
    icon: NextJSIcon,
    colorClasses: "bg-gradient-to-r from-gray-700 to-gray-900 dark:from-gray-600 dark:to-gray-800",
    type: TechnologyType.Frontend,
  },
  {
    name: "Git",
    icon: GitIcon,
    colorClasses: "bg-gradient-to-r from-orange-500 to-red-500 dark:from-orange-400 dark:to-red-400",
    type: TechnologyType.Other,
  },
  {
    name: "Python",
    icon: PythonIcon,
    colorClasses: "bg-gradient-to-r from-blue-500 to-blue-700 dark:from-blue-400 dark:to-blue-600",
    type: TechnologyType.Backend,
  },
  {
    name: "MongoDB",
    icon: MongoDBIcon,
    colorClasses: "bg-gradient-to-r from-green-500 to-green-700 dark:from-green-400 dark:to-green-600",
    type: TechnologyType.Backend,
  },
  {
    name: "PostgreSQL",
    icon: PostgreSQLIcon,
    colorClasses: "bg-gradient-to-r from-blue-500 to-indigo-600 dark:from-blue-400 dark:to-indigo-500",
    type: TechnologyType.Backend,
  },
  {
    name: "NodeJS",
    icon: NodeJSIcon,
    colorClasses: "bg-gradient-to-r from-green-500 to-green-600 dark:from-green-400 dark:to-green-500",
    type: TechnologyType.Backend,
  },
  {
    name: "React",
    icon: ReactIcon,
    colorClasses: "bg-gradient-to-r from-blue-400 to-cyan-400 dark:from-blue-300 dark:to-cyan-300",
    type: TechnologyType.Frontend,
  },
  {
    name: "Google Cloud",
    icon: GoogleCloudIcon,
    colorClasses: "bg-gradient-to-r from-blue-500 to-blue-600 dark:from-blue-400 dark:to-blue-500",
    type: TechnologyType.Other,
  },
];

// Agrupar tecnologías por tipo
const frontendTechs = TECHNOLOGIES.filter(tech => tech.type === TechnologyType.Frontend);
const backendTechs = TECHNOLOGIES.filter(tech => tech.type === TechnologyType.Backend);
const databaseTechs = TECHNOLOGIES.filter(tech => tech.type === TechnologyType.Database);
const otherTechs = TECHNOLOGIES.filter(tech => tech.type === TechnologyType.Other);

// Textos para las categorías
const categoryTexts = {
  frontend: t('technologies.frontend') || 'Frontend',
  backend: t('technologies.backend') || 'Backend',
  database: t('technologies.database') || 'Database',
  other: t('technologies.other') || 'Other'
};
---

<div class="tech-showcase">
  <!-- Tabs para categorías -->
  <div class="tech-tabs">
    <button class="tech-tab active" data-category="frontend">{categoryTexts.frontend}</button>
    <button class="tech-tab" data-category="backend">{categoryTexts.backend}</button>
    <button class="tech-tab" data-category="other">{categoryTexts.other}</button>
  </div>

  <!-- Contenedor para las tarjetas -->
  <div class="tech-container">
    <!-- Frontend Technologies -->
    <div class="tech-category active" id="frontend">
      <div class="tech-grid">
        {frontendTechs.map((tech) => (
          <div class="tech-card" data-tilt>
            <div class={`tech-card-inner ${tech.colorClasses}`}>
              <tech.icon className="tech-icon" />
              <span class="tech-name">{tech.name}</span>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Backend Technologies -->
    <div class="tech-category" id="backend">
      <div class="tech-grid">
        {backendTechs.map((tech) => (
          <div class="tech-card" data-tilt>
            <div class={`tech-card-inner ${tech.colorClasses}`}>
              <tech.icon className="tech-icon" />
              <span class="tech-name">{tech.name}</span>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Other Technologies -->
    <div class="tech-category" id="other">
      <div class="tech-grid">
        {otherTechs.map((tech) => (
          <div class="tech-card" data-tilt>
            <div class={`tech-card-inner ${tech.colorClasses}`}>
              <tech.icon className="tech-icon" />
              <span class="tech-name">{tech.name}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
  .tech-showcase {
    width: 100%;
    margin: 2rem 0;
  }

  .tech-tabs {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .tech-tab {
    padding: 0.5rem 1.5rem;
    border-radius: 9999px;
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--color-text);
    border: 1px solid rgba(255, 255, 255, 0.2);
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
  }

  .tech-tab.active {
    background-color: rgba(79, 70, 229, 0.2);
    border-color: rgba(79, 70, 229, 0.4);
    color: #4f46e5;
  }

  .tech-tab:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .tech-category {
    display: none;
    animation: fadeIn 0.5s ease forwards;
  }

  .tech-category.active {
    display: block;
  }

  .tech-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: 1.5rem;
  }

  .tech-card {
    perspective: 1000px;
    cursor: pointer;
  }

  .tech-card-inner {
    height: 160px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: transform 0.6s cubic-bezier(0.23, 1, 0.32, 1);
    transform-style: preserve-3d;
    position: relative;
    overflow: hidden;
  }

  .tech-card-inner::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    transform: translateY(100%);
    transition: transform 0.6s cubic-bezier(0.23, 1, 0.32, 1);
    z-index: 0;
  }

  .tech-card:hover .tech-card-inner::before {
    transform: translateY(0);
  }

  .tech-icon {
    width: 3.5rem;
    height: 3.5rem;
    margin-bottom: 1rem;
    z-index: 1;
    filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1));
    transition: transform 0.3s ease;
  }

  .tech-card:hover .tech-icon {
    transform: scale(1.1);
  }

  .tech-name {
    font-size: 0.875rem;
    font-weight: 600;
    color: white;
    z-index: 1;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (min-width: 768px) {
    .tech-grid {
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    }
  }

  @media (min-width: 1024px) {
    .tech-grid {
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    }
  }

  :root {
    --color-text: #4b5563;
  }

  :global(.dark) {
    --color-text: #d1d5db;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    // Efecto de tarjeta 3D al mover el cursor
    const cards = document.querySelectorAll('.tech-card');
    
    cards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = (y - centerY) / 10;
        const rotateY = (centerX - x) / 10;
        
        card.querySelector('.tech-card-inner').style.transform = 
          `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
      });
      
      card.addEventListener('mouseleave', () => {
        card.querySelector('.tech-card-inner').style.transform = 
          'rotateX(0) rotateY(0)';
      });
    });
    
    // Cambio de categorías
    const tabs = document.querySelectorAll('.tech-tab');
    const categories = document.querySelectorAll('.tech-category');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Desactivar todas las pestañas y categorías
        tabs.forEach(t => t.classList.remove('active'));
        categories.forEach(c => c.classList.remove('active'));
        
        // Activar la pestaña seleccionada
        tab.classList.add('active');
        
        // Activar la categoría correspondiente
        const categoryId = tab.getAttribute('data-category');
        document.getElementById(categoryId).classList.add('active');
      });
    });
  });
</script>

