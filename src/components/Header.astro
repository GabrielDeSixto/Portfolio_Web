---
import ThemeToggle from "./ThemeToggle.astro"
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import LanguagePicker from "./LanguagePicker.astro";
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang);
const { currentLocale } = Astro
const navItems = [
  {
    title: t('nav.home'),
    label: "experiencia",
    url: currentLocale === 'en' ? '/en/#experiencia' : '/#experiencia',
  },
  {
    title: t('nav.projects'),
    label: "proyectos",
    url: currentLocale === 'en' ? '/en/#proyectos' : '/#proyectos',
  },
  {
    title: t('nav.about'),
    label: "sobre-mi",
    url: currentLocale === 'en' ? '/en/#sobre-mi' : '/#sobre-mi',
  },
  {
    title: t('nav.contact'),
    label: "contacto",
    url: "mailto:gabrielsolanodesixto@gmail.com",
  },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    id="header-nav"
    class="flex px-4 py-2 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center backdrop-blur-md bg-white/50 dark:bg-gray-900/50 border border-gray-200/20 dark:border-gray-700/20 shadow-lg"
  >
  {
    navItems.map((link) => (
      <a
      class="relative block px-3 py-2 transition hover:text-indigo-500 dark:hover:text-indigo-400"
      aria-label={link.label}
      href={link.url}
      >
      {link.title}
      </a>
      ))
    }
    <ThemeToggle />
    <LanguagePicker />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll('section[data-section]');
    const navItems = document.querySelectorAll('header nav a');

    const callback = (entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          navItems.forEach(item => {
            if (item.getAttribute('aria-label') === entry.target.id) {
              item.classList.add('text-indigo-500', 'dark:text-indigo-400');
            } else {
              item.classList.remove('text-indigo-500', 'dark:text-indigo-400');
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    });

    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script>
  